/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package test;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** User Test Bean */
@org.apache.avro.specific.AvroGenerated
public class SchemaUser extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4526517316193571163L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SchemaUser\",\"namespace\":\"test\",\"doc\":\"User Test Bean\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\",\"logicalType\":\"UUID\"}],\"default\":null},{\"name\":\"createdOn\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"privacy\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"SchemaPrivacy\",\"symbols\":[\"Public\",\"Private\"]}],\"default\":null},{\"name\":\"privacyImported\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"PrivacyImport\",\"doc\":\"Privacy Test Enum\",\"symbols\":[\"Public\",\"Private\"]}],\"default\":null},{\"name\":\"privacyDirectImport\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"PrivacyDirectImport\",\"doc\":\"Privacy Test Enum\",\"symbols\":[\"Public\",\"Private\"]}],\"default\":null},{\"name\":\"time\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<SchemaUser> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SchemaUser> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SchemaUser> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SchemaUser> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SchemaUser> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SchemaUser to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SchemaUser from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SchemaUser instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SchemaUser fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.Long createdOn;
  private test.SchemaPrivacy privacy;
  private test.PrivacyImport privacyImported;
  private test.PrivacyDirectImport privacyDirectImport;
  private java.time.Instant time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SchemaUser() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param createdOn The new value for createdOn
   * @param privacy The new value for privacy
   * @param privacyImported The new value for privacyImported
   * @param privacyDirectImport The new value for privacyDirectImport
   * @param time The new value for time
   */
  public SchemaUser(java.lang.String id, java.lang.Long createdOn, test.SchemaPrivacy privacy, test.PrivacyImport privacyImported, test.PrivacyDirectImport privacyDirectImport, java.time.Instant time) {
    this.id = id;
    this.createdOn = createdOn;
    this.privacy = privacy;
    this.privacyImported = privacyImported;
    this.privacyDirectImport = privacyDirectImport;
    this.time = time.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return createdOn;
    case 2: return privacy;
    case 3: return privacyImported;
    case 4: return privacyDirectImport;
    case 5: return time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: createdOn = (java.lang.Long)value$; break;
    case 2: privacy = (test.SchemaPrivacy)value$; break;
    case 3: privacyImported = (test.PrivacyImport)value$; break;
    case 4: privacyDirectImport = (test.PrivacyDirectImport)value$; break;
    case 5: time = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'createdOn' field.
   * @return The value of the 'createdOn' field.
   */
  public java.lang.Long getCreatedOn() {
    return createdOn;
  }


  /**
   * Sets the value of the 'createdOn' field.
   * @param value the value to set.
   */
  public void setCreatedOn(java.lang.Long value) {
    this.createdOn = value;
  }

  /**
   * Gets the value of the 'privacy' field.
   * @return The value of the 'privacy' field.
   */
  public test.SchemaPrivacy getPrivacy() {
    return privacy;
  }


  /**
   * Sets the value of the 'privacy' field.
   * @param value the value to set.
   */
  public void setPrivacy(test.SchemaPrivacy value) {
    this.privacy = value;
  }

  /**
   * Gets the value of the 'privacyImported' field.
   * @return The value of the 'privacyImported' field.
   */
  public test.PrivacyImport getPrivacyImported() {
    return privacyImported;
  }


  /**
   * Sets the value of the 'privacyImported' field.
   * @param value the value to set.
   */
  public void setPrivacyImported(test.PrivacyImport value) {
    this.privacyImported = value;
  }

  /**
   * Gets the value of the 'privacyDirectImport' field.
   * @return The value of the 'privacyDirectImport' field.
   */
  public test.PrivacyDirectImport getPrivacyDirectImport() {
    return privacyDirectImport;
  }


  /**
   * Sets the value of the 'privacyDirectImport' field.
   * @param value the value to set.
   */
  public void setPrivacyDirectImport(test.PrivacyDirectImport value) {
    this.privacyDirectImport = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.time.Instant getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.time.Instant value) {
    this.time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new SchemaUser RecordBuilder.
   * @return A new SchemaUser RecordBuilder
   */
  public static test.SchemaUser.Builder newBuilder() {
    return new test.SchemaUser.Builder();
  }

  /**
   * Creates a new SchemaUser RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SchemaUser RecordBuilder
   */
  public static test.SchemaUser.Builder newBuilder(test.SchemaUser.Builder other) {
    if (other == null) {
      return new test.SchemaUser.Builder();
    } else {
      return new test.SchemaUser.Builder(other);
    }
  }

  /**
   * Creates a new SchemaUser RecordBuilder by copying an existing SchemaUser instance.
   * @param other The existing instance to copy.
   * @return A new SchemaUser RecordBuilder
   */
  public static test.SchemaUser.Builder newBuilder(test.SchemaUser other) {
    if (other == null) {
      return new test.SchemaUser.Builder();
    } else {
      return new test.SchemaUser.Builder(other);
    }
  }

  /**
   * RecordBuilder for SchemaUser instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SchemaUser>
    implements org.apache.avro.data.RecordBuilder<SchemaUser> {

    private java.lang.String id;
    private java.lang.Long createdOn;
    private test.SchemaPrivacy privacy;
    private test.PrivacyImport privacyImported;
    private test.PrivacyDirectImport privacyDirectImport;
    private java.time.Instant time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(test.SchemaUser.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.createdOn)) {
        this.createdOn = data().deepCopy(fields()[1].schema(), other.createdOn);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.privacy)) {
        this.privacy = data().deepCopy(fields()[2].schema(), other.privacy);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.privacyImported)) {
        this.privacyImported = data().deepCopy(fields()[3].schema(), other.privacyImported);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.privacyDirectImport)) {
        this.privacyDirectImport = data().deepCopy(fields()[4].schema(), other.privacyDirectImport);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.time)) {
        this.time = data().deepCopy(fields()[5].schema(), other.time);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing SchemaUser instance
     * @param other The existing instance to copy.
     */
    private Builder(test.SchemaUser other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createdOn)) {
        this.createdOn = data().deepCopy(fields()[1].schema(), other.createdOn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.privacy)) {
        this.privacy = data().deepCopy(fields()[2].schema(), other.privacy);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.privacyImported)) {
        this.privacyImported = data().deepCopy(fields()[3].schema(), other.privacyImported);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.privacyDirectImport)) {
        this.privacyDirectImport = data().deepCopy(fields()[4].schema(), other.privacyDirectImport);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.time)) {
        this.time = data().deepCopy(fields()[5].schema(), other.time);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public test.SchemaUser.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public test.SchemaUser.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdOn' field.
      * @return The value.
      */
    public java.lang.Long getCreatedOn() {
      return createdOn;
    }


    /**
      * Sets the value of the 'createdOn' field.
      * @param value The value of 'createdOn'.
      * @return This builder.
      */
    public test.SchemaUser.Builder setCreatedOn(java.lang.Long value) {
      validate(fields()[1], value);
      this.createdOn = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'createdOn' field has been set.
      * @return True if the 'createdOn' field has been set, false otherwise.
      */
    public boolean hasCreatedOn() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'createdOn' field.
      * @return This builder.
      */
    public test.SchemaUser.Builder clearCreatedOn() {
      createdOn = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'privacy' field.
      * @return The value.
      */
    public test.SchemaPrivacy getPrivacy() {
      return privacy;
    }


    /**
      * Sets the value of the 'privacy' field.
      * @param value The value of 'privacy'.
      * @return This builder.
      */
    public test.SchemaUser.Builder setPrivacy(test.SchemaPrivacy value) {
      validate(fields()[2], value);
      this.privacy = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'privacy' field has been set.
      * @return True if the 'privacy' field has been set, false otherwise.
      */
    public boolean hasPrivacy() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'privacy' field.
      * @return This builder.
      */
    public test.SchemaUser.Builder clearPrivacy() {
      privacy = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'privacyImported' field.
      * @return The value.
      */
    public test.PrivacyImport getPrivacyImported() {
      return privacyImported;
    }


    /**
      * Sets the value of the 'privacyImported' field.
      * @param value The value of 'privacyImported'.
      * @return This builder.
      */
    public test.SchemaUser.Builder setPrivacyImported(test.PrivacyImport value) {
      validate(fields()[3], value);
      this.privacyImported = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'privacyImported' field has been set.
      * @return True if the 'privacyImported' field has been set, false otherwise.
      */
    public boolean hasPrivacyImported() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'privacyImported' field.
      * @return This builder.
      */
    public test.SchemaUser.Builder clearPrivacyImported() {
      privacyImported = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'privacyDirectImport' field.
      * @return The value.
      */
    public test.PrivacyDirectImport getPrivacyDirectImport() {
      return privacyDirectImport;
    }


    /**
      * Sets the value of the 'privacyDirectImport' field.
      * @param value The value of 'privacyDirectImport'.
      * @return This builder.
      */
    public test.SchemaUser.Builder setPrivacyDirectImport(test.PrivacyDirectImport value) {
      validate(fields()[4], value);
      this.privacyDirectImport = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'privacyDirectImport' field has been set.
      * @return True if the 'privacyDirectImport' field has been set, false otherwise.
      */
    public boolean hasPrivacyDirectImport() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'privacyDirectImport' field.
      * @return This builder.
      */
    public test.SchemaUser.Builder clearPrivacyDirectImport() {
      privacyDirectImport = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.time.Instant getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public test.SchemaUser.Builder setTime(java.time.Instant value) {
      validate(fields()[5], value);
      this.time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public test.SchemaUser.Builder clearTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SchemaUser build() {
      try {
        SchemaUser record = new SchemaUser();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.createdOn = fieldSetFlags()[1] ? this.createdOn : (java.lang.Long) defaultValue(fields()[1]);
        record.privacy = fieldSetFlags()[2] ? this.privacy : (test.SchemaPrivacy) defaultValue(fields()[2]);
        record.privacyImported = fieldSetFlags()[3] ? this.privacyImported : (test.PrivacyImport) defaultValue(fields()[3]);
        record.privacyDirectImport = fieldSetFlags()[4] ? this.privacyDirectImport : (test.PrivacyDirectImport) defaultValue(fields()[4]);
        record.time = fieldSetFlags()[5] ? this.time : (java.time.Instant) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SchemaUser>
    WRITER$ = (org.apache.avro.io.DatumWriter<SchemaUser>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SchemaUser>
    READER$ = (org.apache.avro.io.DatumReader<SchemaUser>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










